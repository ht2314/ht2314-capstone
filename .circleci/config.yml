version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.3

default-node-image: &default-node-image
  docker:
    - image: cimg/node:18.12.0

commands:
  install-kubectl:
    description: resusable command to install kubectl
    steps:
      - run:
          name: install kubectl
          command: |
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.23.7/2022-06-29/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            kubectl version --short --client

  install-eksctl:
    description: resusable command to install eksctl
    steps:
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

  destroy-cluster:
    description: destroy cluster if there is a failure in creation
    steps:
      - run:
          name: destroy cluster
          when: on_fail
          command: |
            eksctl delete cluster --region=us-east-1 --name=capstone-project --profile capstone-user

  configure-aws-capstone-profile:
    description: configure to the capstone-user profile for aws
    steps:
      - run:
          name: create new non default aws profile
          command: | 
            cd ~
            cd .aws
            echo "[profile capstone-user]" >> config
            echo "region=$AWS_DEFAULT_REGION" >> config
            echo "output=json" >> config
            echo "[capstone-user]" >> credentials
            echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> credentials
            echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> credentials
            
jobs:
  build:
    <<: *default-node-image
    steps:
      - checkout
      - run:
          name: install dependencies
          command: npm install
      - run:
          name: build
          command: npm run build
      - save_cache:
          paths: [./node_modules, .svelte-kit]
          key: app-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}

  test:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: app-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: run unit tests
          command: npm run test

  lint:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: app-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: install hadolint
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run:
          name: lint dockerfile
          command: hadolint Dockerfile
      - run:
          name: lint code
          command: |
            npm run format
            npm run lint

  build-docker-image:
    machine:
      image: ubuntu-2204:2022.10.2
    steps:
      - checkout
      - restore_cache:
          key: app-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: login into dockerhub
          command: docker login --username $DOCKER_USER --password $DOCKER_PW
      - run:
          name: build docker image
          command: docker build -t capstone .
      - run:
          name: tag docker image
          command: docker tag capstone ht2314/capstone:${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: push docker image
          command: docker push ht2314/capstone:${CIRCLE_WORKFLOW_ID:0:7}

  create-infra:
    <<: *default-node-image
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - install-kubectl
      - install-eksctl
      - configure-aws-capstone-profile
      - run:
          name: create cluster
          command: |
            capstone=$(aws eks list-clusters | grep "capstone-project" || true)
            echo $capstone
            if [[ -n "$capstone" ]]
            then
                echo "capstone project already exists, skipping creation new cluster"
            else
                eksctl create cluster --name capstone-project --region us-east-1 --node-type t2.micro --profile capstone-user
                kubectl create deploy capstone-project --image=ht2314/capstone:d3d3a3e
                kubectl rollout status deployment/capstone-project
                kubectl describe deployment capstone-project
                kubectl expose deployment capstone-project --name capstone-lb --type LoadBalancer --port 4173
                sleep 300
            fi
          no_output_timeout: 60m
      - destroy-cluster

  deploy:
    <<: *default-node-image
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - install-eksctl
      - install-kubectl
      - configure-aws-capstone-profile
      - run:
          name: set up cluster config
          command: |
            aws eks --region us-east-1 update-kubeconfig --name capstone-project --profile capstone-user
      - run:
          name: update to new version
          command: |
            kubectl get deployments
            kubectl set image deployment/capstone-project capstone-project=ht2314/capstone:${CIRCLE_WORKFLOW_ID:0:7}
            kubectl rollout status deployment/capstone-project
            kubectl describe deployment capstone-project

workflows:
  default:
    jobs:
      - create-infra
      - build
      - test:
          requires: [build]
      - lint:
          requires: [build]
      - build-docker-image:
          requires: [lint, test]
      - deploy:
          requires: [create-infra, build-docker-image]
